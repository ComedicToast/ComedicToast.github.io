[
  {
    "objectID": "portfolio/Lab 2 Post/index.html",
    "href": "portfolio/Lab 2 Post/index.html",
    "title": "Lab 2 Blog Post",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(here)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(gganimate)\nlibrary(gifski)\nlibrary(leaflet)\nlibrary(geojsonio)\nlibrary(sf)\nlibrary(viridisLite)"
  },
  {
    "objectID": "portfolio/Lab 2 Post/index.html#dissecting-a-bad-visualization",
    "href": "portfolio/Lab 2 Post/index.html#dissecting-a-bad-visualization",
    "title": "Lab 2 Blog Post",
    "section": "Dissecting a Bad Visualization",
    "text": "Dissecting a Bad Visualization\nBelow is an example of a less-than-ideal visualization from the collection linked above. It comes to us from data provided for the Wellcome Global Monitor 2018 report by the Gallup World Poll:\n\n\nWhile there are certainly issues with this image, do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nThe graph is telling me the amount of trust in vaccines that different countries have, with each country belonging to a specific global region. The general trend is that the global regions are ordered from highest trust to lowest trust from top to bottom (Asia, Middle East and North Africa, etc.). The authors likely meant to show the general trend in vaccine trust among countries within their respective global regions. The authors also wanted to highlight particular countries (typically the lower/higher trust ones within a particular global region) by providing their labels.\n\nList the variables that appear to be displayed in this visualization. Hint: Variables refer to columns in the data.\n\nThe variables are global region, country, and % of people who believe vaccines are safe. The y-axis on this graph appears to act as a way to separate the countries (which is a bit strange) and doesn’t have a particular variable attached to it.\n\nNow that you’re versed in the grammar of graphics (e.g., ggplot), list the aesthetics used and which variables are mapped to each.\n\nThe x-axis aesthetic is mapped to the variable % of people who believe vaccines are safe. The y-axis aesthetic technically isn’t mapped to anything, but the countries are separated across the y-axis. Another aesthetic is the separation of the plot into 7 regions (using group perhaps?), with the global region variable mapped to it.\n\nWhat type of graph would you call this? Meaning, what geom would you use to produce this plot?\n\nI would use geom_point to produce this plot. This is a dot graph/point graph.\n\nProvide at least four problems or changes that would improve this graph. Please format your changes as bullet points!\n\n\nRemove the legend on the bottom of the graph, as it isn’t needed due to the color separation and text already present\nI would add a label for the median bars to indicate the value of the median for each global region\nIf only some of the data points are going to be labeled, there needs to be a line connecting the point to the name, because sometimes it is quite hard to tell which label is associated with which dot\nI would consider separating each global region out into frames in a gif. That way, if it isn’t too crowded, each country could be labeled separately, and there would not be as much information to take in all at once"
  },
  {
    "objectID": "portfolio/Lab 2 Post/index.html#improving-the-bad-visualization",
    "href": "portfolio/Lab 2 Post/index.html#improving-the-bad-visualization",
    "title": "Lab 2 Blog Post",
    "section": "Improving the Bad Visualization",
    "text": "Improving the Bad Visualization\nThe data for the Wellcome Global Monitor 2018 report can be downloaded at the following site: https://wellcome.ac.uk/reports/wellcome-global-monitor/2018\n\nThere are two worksheets in the downloaded dataset file. You may need to read them in separately, but you may also just use one if it suffices.\n\ncrosstabs &lt;- read_excel(here(\"data\",\"wgm2018.xlsx\"), sheet=1, skip=2)\nfull_data &lt;- read_excel(here(\"data\" ,\"wgm2018.xlsx\"), sheet=2)\ndictionary &lt;- read_excel(here(\"data\" ,\"wgm2018.xlsx\"), sheet=3)\n#this is cleaned data for q1 specifically\ncleaned &lt;- read.csv(here(\"data\" ,\"wgm_cleaned.csv\"))\n\nThis appends country codes and region codes onto the cleaned dataset\n\n# Remove the trailing comma\ntext &lt;- sub(\",$\", \"\", dictionary[1,3])\n\n# Split by comma\nparts &lt;- strsplit(text, \",\\\\s*\")[[1]]\n\nparts &lt;- as_tibble(parts)\n\ncountry_codes &lt;- separate_wider_delim(parts, value, delim = \"=\", names = c(\"code\", \"country\"))\n\ncleaned_codes &lt;- left_join(cleaned, country_codes, by = \"country\")\n\ncountries_regions &lt;- full_data %&gt;%\n  select(WP5, Regions_Report) %&gt;%\n  rename(\"code\" = \"WP5\") %&gt;%\n  mutate(code = as.character(code))\n\nclean_regions &lt;- left_join(cleaned_codes, countries_regions, by = \"code\") %&gt;%\n  distinct() \n\nThis gets the proportion in each country who said “Strongly agree” or “Somewhat agree”\n\ngrouped &lt;- clean_regions %&gt;%\n  group_by(country) %&gt;%\n  mutate(pct_vaccines_safe = sum(National.results[answer %in% c(\"Strongly agree\", \"Somewhat agree\")]) / 1) %&gt;%\n  select(country, pct_vaccines_safe, Regions_Report) %&gt;%\n  distinct() %&gt;%\n  mutate(Region = case_when(\n    Regions_Report %in% c(1, 2, 4, 5) ~ \"Africa\",\n    Regions_Report %in% c(6, 7, 8) ~ \"Americas\",\n    Regions_Report %in% c(9, 10, 11, 12, 18) ~ \"Asia\",\n    Regions_Report %in% c(3, 13) ~ \"Middle East and North Africa\",\n    Regions_Report %in% c(15, 16, 17, 0) ~ \"Europe\",\n    Regions_Report == 14 ~ \"Former Soviet Union\"\n  )) %&gt;%\n  select(-Regions_Report) %&gt;%\n  filter(!is.na(Region))\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\nGet top 5 and bottom 5 countries for each region, and get medians for each region\n\ntop5bot5 &lt;- grouped %&gt;% \n    group_by(Region) %&gt;%\n    mutate(rank = rank(pct_vaccines_safe)) %&gt;%\n    filter(rank &lt;= 5 | rank &gt; n() - 5) %&gt;%\n    ungroup()\n\nmedians &lt;- grouped %&gt;% \n        group_by(Region) %&gt;% \n        summarize(median_value = median(pct_vaccines_safe)) %&gt;%\n        mutate(y = Inf, label = paste0(scales::percent(median_value, accuracy = 0.1)))\n\nThis is just used to put the region label on the top right of the gif\n\nlabel_data &lt;- grouped %&gt;%\n  group_by(Region) %&gt;%\n  slice_max(pct_vaccines_safe, n = 1) %&gt;%  \n  ungroup()\n\nCreate the visualization\n\ntest &lt;- grouped %&gt;%\n  ggplot(aes(x = pct_vaccines_safe, y=reorder(country, pct_vaccines_safe))) +\n  geom_vline(\n    data = medians,\n    aes(xintercept = median_value),\n    linetype = \"dashed\",\n    color = \"black\",\n    linewidth = 0.7\n  ) +\n  geom_point(aes(color = Region), show.legend = FALSE) +\n  geom_text_repel(data = top5bot5,\n                  aes(x = pct_vaccines_safe, y = country, label=country),\n                  size = 3,\n                  nudge_x = 0.1,\n                  nudge_y = -0.1,\n                  direction = \"y\",\n                  segment.color = \"azure4\",\n                  color = \"gray50\",\n                  box.padding = 0.35,\n                  max.overlaps = 20,\n                  max.time =    3,\n    ) +\n  geom_text(\n    data = medians,\n    aes(x = median_value, y = y, label = label),\n    vjust = 0,\n    hjust = 0.5,\n    size = 3,\n    color = \"black\"\n  ) +\n  geom_text(\n    data = label_data,\n    aes(x = 0.5, y = Inf, label = Region, color = Region),\n    vjust = 2,\n    size = 6.5,\n    fontface = \"bold\",\n    show.legend = FALSE,\n    inherit.aes = FALSE\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    panel.grid.minor.x = element_blank(), \n    axis.text.y= element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.spacing = unit(1, \"lines\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.margin = margin(15, 25, 15, 15)\n  ) +\n  labs(\n    title = \"Percentage of people across countries who believes vaccines are safe\",\n    subtitle = \"Dashed line is the median for the region\",\n    x = \"Percentage who believe vaccines are safe\",\n    y = \"\"\n  ) +\n  scale_x_continuous(labels = percent_format(scale=100),\n                     breaks = seq(0.4, 1, by = 0.2),\n                     expand = expansion(mult = c(0.05, 0.15))) +\n                     coord_cartesian(clip = \"off\") +\n                     transition_states(Region, transition_length = 0, state_length = 10)\n\nanimate(test, nframes = 60, duration = 30)\n\n\n\n\n\n\n\n\nThe country labels slightly jitter and get in the way a tad but this is the best I was able to come up with based off my initial ideas"
  },
  {
    "objectID": "portfolio/Lab 2 Post/index.html#second-data-visualization-improvement",
    "href": "portfolio/Lab 2 Post/index.html#second-data-visualization-improvement",
    "title": "Lab 2 Blog Post",
    "section": "Second Data Visualization Improvement",
    "text": "Second Data Visualization Improvement\nFor this second plot, you must select a plot that uses maps so you can demonstrate your proficiency with the leaflet package!\n\nSelect a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nI am looking at page 55, Chart 3.3: Map of countries according to levels of Trust in Scientists.\nThe graph is attempting to portray the level of trust in science across the various world countries.\n\nList the variables that appear to be displayed in this visualization.\n\nThe variables displayed are country, and Wellcome Global Monitor Trust in Scientists Index (recoded into 3 categories). As to what particular category is plotted per country, I am a bit unsure, but I think it is the “high trust in science” category.\n\nNow that you’re versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\n\nThis isn’t a graph like I am used to, so I’m going to assume something like color = % of population who have high trust in science, and group = country?\n\nWhat type of graph would you call this?\n\nThis is a choropleth map.\n\nList all of the problems or things you would improve about this graph.\n\n\nThe title and subtitle are confusing. How are three different categories being represented at once here? Are the shadings just the majority category level of trust of each country? Then that means these shouldn’t be a percentage?\nThe legend is misleading, but this is tied into the issue with the title.\nWhat I think the best thing to do would be to just display one category for each country. So each country would be shaded according to their % of people who have “high trust” in science. This would make the message less confusing.\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\nGet high trust in scientists % by country\n\nq2data &lt;- crosstabs %&gt;%\nfill(Question, .direction=\"down\") %&gt;%\n  filter(Question == \"Wellcome Global Monitor Trust in Scientists Index (recoded into 3 categories)\", Response == \"High trust\") %&gt;%\n  mutate(`Column N %...4` = round(`Column N %...4`,4)) %&gt;%\n  rename(`High trust in scientists %` = `Column N %...4`) %&gt;%\n  select(1,4)\n\nI went through by hand to double-check country name consistencies between the data from the WGM and the country geojson data.\n\nq2data$Country[q2data$Country == \"United States\"] &lt;- \"United States of America\"\nq2data$Country[q2data$Country == \"Congo, Rep.\"] &lt;- \"Republic of the Congo\"\nq2data$Country[q2data$Country == \"Tanzania\"] &lt;- \"United Republic of Tanzania\"\n\nMake the leaflet map\n\n# Load GeoJSON\nWorldCountry &lt;- st_read(here(\"data\" ,\"countries.geo.json\"))\n\n\n#join q2data and drop na's\nWorldCountry &lt;-WorldCountry %&gt;%\n  left_join(q2data, by = c(\"name\" = \"Country\")) %&gt;%\n  drop_na()\n\n# Define color palette\npal &lt;- colorBin(\"Greens\", domain = WorldCountry$`High trust in scientists %`, bins = 6, na.color = \"lightgrey\")\n\n# Create map\nleaflet(WorldCountry) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(`High trust in scientists %`),\n    color = \"white\",\n    weight = 1,\n    fillOpacity = 0.8,\n    highlight = highlightOptions(\n      weight = 2,\n      color = \"darkgrey\",\n      fillOpacity = 1,\n      bringToFront = TRUE\n    ),\n    label = ~paste0(name, \": \", 100*`High trust in scientists %`, \"%\")\n  ) %&gt;%\n  addLegend(\n    pal = pal,\n    values = ~WorldCountry$`High trust in scientists %`,\n    title = \"Proportion with High Trust in Scientists\",\n    position = \"bottomright\"\n  )"
  },
  {
    "objectID": "portfolio/Lab 2 Post/index.html#third-data-visualization-improvement",
    "href": "portfolio/Lab 2 Post/index.html#third-data-visualization-improvement",
    "title": "Lab 2 Blog Post",
    "section": "Third Data Visualization Improvement",
    "text": "Third Data Visualization Improvement\nFor this third plot, you must use one of the other ggplot2 extension packages mentioned this week (e.g., gganimate, plotly, patchwork, cowplot).\n\nSelect a data visualization in the report that you think could be improved. Be sure to cite both the page number and figure title. Do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nI am selecting Chart 5.3: Perceived effectiveness of vaccines by region. It is on page 111.\nThe graph is attempting to show how different regions of the world view vaccine effectiveness with a horizontal stacked bar chart. They intend to showcase different world region views on vaccine effectiveness.\n\nList the variables that appear to be displayed in this visualization.\n\nRegion, opinion on vaccine effectiveness (6 categories)\n\nNow that you’re versed in the grammar of graphics (ggplot), list the aesthetics used and which variables are specified for each.\n\nThe x-axis is just a 0 to 1 axis, the y-axis is the region of the world, and the color is the category of belief in vaccine effectiveness.\n\nWhat type of graph would you call this?\n\nThis is a stacked bar chart, so I would use geom_bar() most likely.\n\nList all of the problems or things you would improve about this graph.\n\n\nIn my opinion, the graph is a bit overcrowded due to the stacked bar chart nature\nLabelling is inconsistent due to some segments being very small\nMy idea is to separate the graph into a gif where each frame is a different world region and it shows just a regular bar chart. This would also eliminate the need for a legend.\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\nGet data for q3\n\nq3data &lt;- crosstabs %&gt;%\n  fill(Question, .direction=\"down\") %&gt;%\n  filter(Question == \"Q26 Do you strongly or somewhat agree, strongly or somewhat disagree or neither agree nor disagree with the following statement? Vaccines are effective.\") %&gt;%\n  rename(`Proportion` = `Column N %...4`) %&gt;%\n  select(1, 3:5)\n\nSimilar to q1, append region and country codes to the data\n\n# Remove the trailing comma\ntext &lt;- sub(\",$\", \"\", dictionary[1,3])\n\n# Split by comma\nparts &lt;- strsplit(text, \",\\\\s*\")[[1]]\n\nparts &lt;- as_tibble(parts)\n\ncountry_codes &lt;- separate_wider_delim(parts, value, delim = \"=\", names = c(\"code\", \"Country\"))\n\ncleaned_codes &lt;- left_join(q3data, country_codes, by = \"Country\")\n\ncountries_regions &lt;- full_data %&gt;%\n  select(WP5, Regions_Report) %&gt;%\n  rename(\"code\" = \"WP5\") %&gt;%\n  mutate(code = as.character(code),\n         Regions_Report = as.character(Regions_Report))\n\nclean_regions &lt;- left_join(cleaned_codes, countries_regions, by = \"code\") %&gt;%\n  distinct() \n\nConvert region code to region name and clean data a bit more\n\n# Remove the trailing comma\ntext &lt;- sub(\",$\", \"\", dictionary[57,3])\n\n# Split by comma\nparts &lt;- strsplit(text, \",\\\\s*\")[[1]]\n\nparts &lt;- as_tibble(parts)\n\nregion_codes &lt;- separate_wider_delim(parts, value, delim = \"=\", names = c(\"Regions_Report\", \"Region\"))\n\ncleaned_codes &lt;- left_join(clean_regions, region_codes, by = \"Regions_Report\")\n\nq3clean &lt;- cleaned_codes %&gt;%\n  mutate(Region = replace_na(Region, \"Not assigned\")) %&gt;%\n  select(-c(Proportion,code,Regions_Report)) %&gt;%\n  filter(Response != \"Total\") %&gt;%\n  rename(Counts = `Unweighted Count...5`)\n\nGoing to use the raw counts to make the bar graphs since averaging proportions across countries doesn’t make sense, and the weight adjustment they used for the proportions is unclear to me\nCalculate proportions from raw counts for each region\n\nregion_response_props &lt;- q3clean %&gt;%\n  group_by(Region, Response) %&gt;%\n  summarise(RegionCounts = sum(Counts)) %&gt;%\n  mutate(Proportion = RegionCounts / sum(RegionCounts))\n\nregion_response_props &lt;- region_response_props %&gt;%\n   mutate(Response = factor(Response, levels = c(\n    \"Strongly agree\",\n    \"Somewhat agree\",\n    \"Neither agree nor disagree\",\n    \"Somewhat disagree\",\n    \"Strongly disagree\",\n    \"Don't know/Refused\"\n  )))\n\nMake a df with each region once to grab labels\n\nlabel_data &lt;- region_response_props %&gt;%\n  group_by(Region) %&gt;%\n  slice_max(RegionCounts, n = 1) %&gt;%  \n  ungroup()\n\nCreate visualization\n\np &lt;- ggplot(region_response_props, aes(x = factor(Response, c(\n    \"Strongly agree\",\n    \"Somewhat agree\",\n    \"Neither agree nor disagree\",\n    \"Somewhat disagree\",\n    \"Strongly disagree\",\n    \"Don't know/Refused\")), y = Proportion, fill = Response)) +\n     geom_col() +\n  # geom_text(aes(label = scales::percent(Proportion, accuracy = 1), group=Response),\n  #         hjust = -0.1,  \n  #         size = 4,      \n  #         color = \"black\",\n  #         fontface = \"bold\") +\n     scale_fill_brewer(palette = \"Set3\") +\n     labs(title = \"Belief in the statement: \\\"Vaccines are effective.\\\"\", subtitle = \"Region: {closest_state}\",\n       x = \"\", y = \"\") +\n     scale_y_continuous(labels = scales::percent_format()) +\n     coord_flip() +\n     theme_minimal() +\n     theme(legend.position = \"none\",\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title.position = \"plot\",\n        plot.title = element_text(size = 20, hjust = 0),\n        plot.subtitle = element_text(size = 15, hjust = 0, face=\"bold\"),\n        axis.text.y = element_text(size = 9,, color = \"black\")) +\n     transition_states(Region, transition_length = 4, state_length = 2) +\n     ease_aes('cubic-in-out')\n\nanimate(p, fps = 10, duration = 50)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ComedicToast",
    "section": "",
    "text": "This website is to host projects I have done in STAT 541."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website showcases the different labs for STAT 541. It is intended to be a portfolio showcasing the skills acquired in the class."
  },
  {
    "objectID": "portfolio/Lab 1 Post/index.html",
    "href": "portfolio/Lab 1 Post/index.html",
    "title": "Lab 1 Blog Post",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggridges)"
  },
  {
    "objectID": "portfolio/Lab 1 Post/index.html#quarto",
    "href": "portfolio/Lab 1 Post/index.html#quarto",
    "title": "Lab 1 Blog Post",
    "section": "Quarto",
    "text": "Quarto\nFirst, let’s make sure you know how to use Markdown formatting to style a Quarto document.\n\nMake this text bold.\nMake this text italicized.\nMake these into a bullet point list:\n\n\nApples\nBananas\nPotatoes\n\n\nEdit the YAML to remove warning messages from being output in the rendered HTML file\nUsing code chunk options, make it so this chunk shows the plot but not the source code:\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, remove the messages about bandwidth geom_density_ridges() chose to use:\n\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so that these plots are printed side-by-side:\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_boxplot() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so this chunk shows the code but not the output:\n\n\n2 + 2\n\n\nUsing code chunk options, make it so the file can still knit even though this chunk has an error\n\n\n2 + a\n\nError: object 'a' not found\n\n\n\nUsing code chunk options, create a descriptive label for each of the code chunks above."
  },
  {
    "objectID": "portfolio/Lab 1 Post/index.html#data-wrangling-review",
    "href": "portfolio/Lab 1 Post/index.html#data-wrangling-review",
    "title": "Lab 1 Blog Post",
    "section": "Data Wrangling Review",
    "text": "Data Wrangling Review\nSince you already seen some ggplots, let’s do a bit of review on data handling. In this class, we will exclusively make use of tools from the tidyverse suite of packages to perform our data cleaning and wrangling operations. If you are less familiar with these packages or it’s been some time since you used them, I would strongly recommend referencing the function documentation!\nFor these problems, we will continue to work with the mpg data frame, making various changes to the data to clean it up.\n\nThe fl variable describes the type of fuel for each car, with levels: p, r, e, d, and c. Do some research into what each of these labels mean! Then, use the if_else() function to create a new variable (fuel_type) with two levels: petrol (any car using petrolium-based gas) and alternative energy (any car not using petrolium-based gas).\n\n\n# premium and diesel and regular in petrol, electric and cng in alternative\ndfq11 &lt;-mpg %&gt;%\n  mutate(fuel_type = if_else(fl %in% c(\"p\", \"d\", \"r\"), \"petrol\", \"alternative energy\"))\ndfq11\n\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n# ℹ 1 more variable: fuel_type &lt;chr&gt;\n\n\n\nThe drv variable describes if the car has front drive (f), rear drive (r), or four wheel drive (4). Let’s make better labels for these values! Specifically, use the case_when() function to change the drv varible to have the following levels: front, rear, four wheel.\n\n\ndfq12 &lt;- mpg %&gt;%\n  mutate(drv = case_when(\n    drv == \"f\" ~ \"front\",\n    drv == \"r\" ~ \"rear\",\n    drv == \"4\" ~ \"four wheel\"\n  ))\n\ndfq12\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… front    18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… front    21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… front    20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… front    21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… front    16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… front    18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… front    18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… four…    18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… four…    16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… four…    20    28 p     comp…\n# ℹ 224 more rows\n\n\n(string split + remove extra “)” ) 13. The trans variable contains two pieces of information, (1) the transmission style (auto or manual) and the specific type of transmission (e.g., l5, m5). Using the str_split() function, create a new variable (trans_type) containing the specific type of transmission of each car. Once you’ve made this new variable, use the rename() function to change the name of the trans column to trans_style.\nHint: You will need to deal with the stray parenthesis!\n\ndfq13 &lt;- mpg %&gt;%\n  mutate(trans_type = str_split(trans, \"\\\\(\", simplify = T)[,2],\n         trans_type = str_remove(trans_type, \"\\\\)\"),\n         trans = str_split(trans, \"\\\\(\", simplify = T)[,1]) %&gt;%\n  rename(trans_style = trans)\n\ndfq13\n\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans_style drv     cty   hwy fl   \n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto        f        18    29 p    \n 2 audi         a4           1.8  1999     4 manual      f        21    29 p    \n 3 audi         a4           2    2008     4 manual      f        20    31 p    \n 4 audi         a4           2    2008     4 auto        f        21    30 p    \n 5 audi         a4           2.8  1999     6 auto        f        16    26 p    \n 6 audi         a4           2.8  1999     6 manual      f        18    26 p    \n 7 audi         a4           3.1  2008     6 auto        f        18    27 p    \n 8 audi         a4 quattro   1.8  1999     4 manual      4        18    26 p    \n 9 audi         a4 quattro   1.8  1999     4 auto        4        16    25 p    \n10 audi         a4 quattro   2    2008     4 manual      4        20    28 p    \n# ℹ 224 more rows\n# ℹ 2 more variables: class &lt;chr&gt;, trans_type &lt;chr&gt;"
  },
  {
    "objectID": "portfolio/Lab 1 Post/index.html#getting-to-know-your-classmates",
    "href": "portfolio/Lab 1 Post/index.html#getting-to-know-your-classmates",
    "title": "Lab 1 Blog Post",
    "section": "Getting to know your classmates",
    "text": "Getting to know your classmates\n\nFind someone who took Stat 331 from a different professor than you. Compare your experiences. Tell me their name and professor. List one or two things that you think you learned more about, and one or two things that they learned more about.\n\nLily had Dr. Frame and learned a lot about tidyverse and said she had a lot of fill in the blank questions on Canvas. She said she learned how to use R for applications outside of statistics. In my R class, I had Dr. T, and I learned a lot of beginner and intermediate R skills, including making functions and project work.\nI think I learned more about R in relation to data wrangling and statistics, and Lily learned more about applying R to situations outside of statistics like economics.\n\nFind someone in the class who does not share your birth month. Tell me their name and birthday, and use R to find out how many days apart your birthdays are.\n\nHannah, December 3rd 2003\n\nmy_bday &lt;- as.Date(\"2001-08-30\")\nhannah_bday  &lt;- as.Date(\"2003-12-03\")\ndiff &lt;- hannah_bday - my_bday\ndiff\n\nTime difference of 825 days"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Lab 6 Blog Post\n\n\n\nQuarto\n\n\nR\n\n\n\nFunctions and Code Efficiency\n\n\n\nComedicToast\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 4 Blog Post\n\n\n\nQuarto\n\n\nR\n\n\n\nShiny R Quarto Dashboards\n\n\n\nComedicToast\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 3 Blog Post\n\n\n\nQuarto\n\n\nR\n\n\n\nStatic Quarto Dashboards\n\n\n\nComedicToast\n\n\nMay 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 2 Blog Post\n\n\n\nQuarto\n\n\nR\n\n\n\nAdvanced Data Visualization\n\n\n\nComedicToast\n\n\nMay 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nLab 1 Blog Post\n\n\n\nQuarto\n\n\nR\n\n\n\nQuarto Warmup and STAT 331 review\n\n\n\nComedicToast\n\n\nMay 1, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio/Lab 6 Post/index.html",
    "href": "portfolio/Lab 6 Post/index.html",
    "title": "Lab 6 Blog Post",
    "section": "",
    "text": "The exercises from the functions below were pulled from the newest version of R for Data Science. Specifically, from Chapters 25 and 26. For this “alternative” lab you will complete the exercises from the textbook, with the option of submitting a pull request to the repository for the textbook solutions.\nlibrary(tidyverse)\nlibrary(nycflights13)"
  },
  {
    "objectID": "portfolio/Lab 6 Post/index.html#data-frame-functions",
    "href": "portfolio/Lab 6 Post/index.html#data-frame-functions",
    "title": "Lab 6 Blog Post",
    "section": "Data Frame Functions",
    "text": "Data Frame Functions\nQuestion 5: Insert the data frame function you wrote from Lab 6 (either Exercise 1 or Exercise 2).\n\nremove_outliers &lt;- function(df, ..., sd_thresh = 3){\n  \n  #error cases for df and sd_thresh\n  if (!is.data.frame(df)) {\n    stop(\"df must be a data frame please!!!!!!!\")\n  }\n  if (!is.numeric(sd_thresh) | sd_thresh &lt;= 0) {\n    stop(\"sd_thresh has to be a positive number please!!!!!!\")\n  }\n  \n  #turn everything in ellipses to quosures\n  names_quosures &lt;- enquos(...)\n  #take everything in names_quosures and extracts the names as character strings\n  names &lt;- map_chr(names_quosures, quo_name)\n  \n  #error cases for the names/...\n  if (length(names) &lt; 1) {\n    stop(\"provide column names to remove outliers from please bro\")\n  }\n  if (!is.character(names)) {\n    stop(\"column names must be character strings!! \")\n  }\n  if (!all(names %in% names(df))) {\n    stop(\"the column(s) are not in the data frame :(\")\n  }\n  \n  #meat of the function. check if the col is numeric, calc z score and then . way to do this without for looping?\n  df_RO &lt;- df\n  for (name in names) {\n    if (!is.numeric(df_RO[[name]])) {\n      warning(paste(\"Skipping non-numeric column \", name))\n      next\n    }\n    mean &lt;- mean(df_RO[[name]], na.rm = TRUE)\n    sd &lt;- sd(df_RO[[name]], na.rm = TRUE)\n    abs_z &lt;- abs((df_RO[[name]] - mean) / sd)\n    df_RO &lt;- df_RO[abs_z &lt;= sd_thresh | is.na(abs_z), ]\n  }\n  return(df_RO)\n}\n\n## Testing how your function handles multiple input variables\nremove_outliers(diamonds, \n                price, \n                x, \n                y, \n                z)\n\n# A tibble: 52,673 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 52,663 more rows\n\n## Testing how your function handles an input that isn't numeric\nremove_outliers(diamonds, \n                price, \n                color)\n\nWarning in remove_outliers(diamonds, price, color): Skipping non-numeric column\ncolor\n\n\n# A tibble: 52,734 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 52,724 more rows\n\n## Testing how your function handles a non-default sd_thresh\nremove_outliers(diamonds, \n                price,\n                x, \n                y, \n                z, \n                sd_thresh = 2)\n\n# A tibble: 48,955 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 48,945 more rows\n\n\nFor Questions 6 - 10 you will write different functions which work with data similar to the nycflights13 data.\nQuestion 6: Write a filter_severe() function that finds all flights that were cancelled (i.e. is.na(arr_time)) or delayed by more than an hour.\n\n#assuming arrival or departure delay\nfilter_severe &lt;- function(df, arrival_delay_var, departure_delay_var, arrival_time_var){\n\n#checks to make sure all the supplied columns are numeric\n    non_num &lt;- df %&gt;%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %&gt;%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n  \n  \n  filtered_df &lt;- df %&gt;%\n    filter(is.na({{arrival_time_var}}) | {{arrival_delay_var}} &gt; 60 | {{departure_delay_var}} &gt; 60)\n  \n  return(filtered_df)\n}\n\nfilter_severe(flights, arr_delay, dep_delay, arr_time)\n\n# A tibble: 40,262 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      811            630       101     1047            830\n 2  2013     1     1      826            715        71     1136           1045\n 3  2013     1     1      848           1835       853     1001           1950\n 4  2013     1     1      957            733       144     1056            853\n 5  2013     1     1     1114            900       134     1447           1222\n 6  2013     1     1     1120            944        96     1331           1213\n 7  2013     1     1     1255           1200        55     1451           1330\n 8  2013     1     1     1301           1150        71     1518           1345\n 9  2013     1     1     1337           1220        77     1649           1531\n10  2013     1     1     1342           1320        22     1617           1504\n# ℹ 40,252 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nQuestion 7: Write a summarize_severe() function that counts the number of cancelled flights and the number of flights delayed by more than an hour.\n\nsummarize_severe &lt;- function(df, arrival_delay_var, departure_delay_var, arrival_time_var){\n  \n  \n#checks to make sure all the supplied columns are numeric\n    non_num &lt;- df %&gt;%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %&gt;%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n  \n  \n  cancelled_count &lt;- df %&gt;%\n    filter(is.na({{arrival_time_var}})) %&gt;%\n    count()\n  \n  delayed_count &lt;- df %&gt;%\n    filter({{arrival_delay_var}} &gt; 60 | {{departure_delay_var}} &gt; 60) %&gt;%\n    count()\n  \n  output &lt;- paste0(\"There are \", cancelled_count, \" cancelled flights and there are \", delayed_count, \" delayed flights, counting both arrival and departure delays.\")\n  return(output)\n  \n}\n\nsummarize_severe(flights, arr_delay, dep_delay, arr_time)\n\n[1] \"There are 8713 cancelled flights and there are 31705 delayed flights, counting both arrival and departure delays.\"\n\n\nQuestion 8: Modify your filter_severe() function to allow the user to supply the number of hours that should be used to filter the flights that were cancelled or delayed.\n\n#assuming arrival or departure delay\nfilter_severe &lt;- function(df, arrival_delay_var, departure_delay_var, arrival_time_var, hours = 1){\n\n#checks to make sure all the supplied columns are numeric\n    non_num &lt;- df %&gt;%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %&gt;%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n    \n  if (!is.numeric({{hours}})) {\n    stop(\n      str_c(\"You must use a number for the `hours` input!\")\n      )\n  }\n  \n  \n  filtered_df &lt;- df %&gt;%\n    filter(is.na({{arrival_time_var}}) | {{arrival_delay_var}} &gt; hours*60 | {{departure_delay_var}} &gt; hours*60)\n  \n  return(filtered_df)\n}\n\nfilter_severe(flights, arr_delay, dep_delay, arr_time, hours=3)\n\n# A tibble: 13,161 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1     1815           1325       290     2120           1542\n 3  2013     1     1     1842           1422       260     1958           1535\n 4  2013     1     1     2006           1630       216     2230           1848\n 5  2013     1     1     2016           1930        46       NA           2220\n 6  2013     1     1     2115           1700       255     2330           1920\n 7  2013     1     1     2205           1720       285       46           2040\n 8  2013     1     1     2312           2000       192       21           2110\n 9  2013     1     1     2343           1724       379      314           1938\n10  2013     1     1       NA           1630        NA       NA           1815\n# ℹ 13,151 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nQuestion 9: Write a summarize_weather() function that summarizes the weather to compute the minimum, mean, and maximum, of a user supplied variable.\n\nsummarize_weather &lt;- function(df, variable){\n  \n  non_num &lt;- df %&gt;%\n    pull( {{ variable }}) %&gt;%\n    is.numeric()\n  \n   if (!non_num) {\n    stop(\n      str_c(\"You must use a numeric variable for the `variable` input!\")\n      )\n  }\n  \n  df %&gt;%\n    summarize(\n      min = min({{variable}}, na.rm = TRUE),\n      mean = mean({{variable}}, na.rm = TRUE),\n      max = max({{variable}}, na.rm=TRUE)\n    )\n    \n}\n\nsummarize_weather(weather, temp)\n\n# A tibble: 1 × 3\n    min  mean   max\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  10.9  55.3  100.\n\n\nQuestion 10: Write a standardize_time() function that converts the user supplied variable that uses clock time (e.g., dep_time, arr_time, etc.) into a decimal time (i.e. hours + (minutes / 60)).\n\nstandardize_time &lt;- function(df, clock_time){\n  non_num &lt;- df %&gt;%\n    pull({{ clock_time }}) %&gt;%\n    is.numeric()\n  \n   if (!non_num) {\n    stop(\n      str_c(\"You must use a numeric variable for the `clock_time` input!\")\n      )\n  }\n  \n  df %&gt;%\n    mutate(\n      {{clock_time}} := case_when(\n        !is.na({{clock_time}}) ~ floor({{clock_time}}/100) + ({{clock_time}} %% 100) / 60\n      )\n    )\n  \n  \n}\n\nstandardize_time(flights, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;dbl&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1     5.28            515         2      830            819\n 2  2013     1     1     5.55            529         4      850            830\n 3  2013     1     1     5.7             540         2      923            850\n 4  2013     1     1     5.73            545        -1     1004           1022\n 5  2013     1     1     5.9             600        -6      812            837\n 6  2013     1     1     5.9             558        -4      740            728\n 7  2013     1     1     5.92            600        -5      913            854\n 8  2013     1     1     5.95            600        -3      709            723\n 9  2013     1     1     5.95            600        -3      838            846\n10  2013     1     1     5.97            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  }
]