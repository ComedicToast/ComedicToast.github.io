{
  "hash": "8598e534c756d09b5538c9f32360f335",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1 Blog Post\"\ndescription: \"Quarto Warmup and STAT 331 review\"\nauthor:\n  - name: ComedicToast\n    url: https://github.com/ComedicToast.io\ndate: 5-1-2025\ncategories: [Quarto, R] # self-defined categories\n#image: preview-image.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggridges)\n```\n:::\n\n\n\n## Quarto\n\nFirst, let's make sure you know how to use Markdown formatting to style a Quarto document.\n\n1.  **Make this text bold.**\n\n2.  *Make this text italicized.*\n\n3.  Make these into a bullet point list:\n\n-   Apples\n\n-   Bananas\n\n-   Potatoes\n\n4.  Edit the YAML to remove warning messages from being output in the rendered HTML file\n\n5.  Using code chunk options, make it so this chunk shows the plot but not the source code:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/tony's cars cars cars boxplots-1.png){width=672}\n:::\n:::\n\n\n\n6.  Using code chunk options, remove the messages about bandwidth `geom_density_ridges()` chose to use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tony's cars cars cars density plots-1.png){width=672}\n:::\n:::\n\n\n\n7.  Using code chunk options, make it so that these plots are printed side-by-side:\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_boxplot() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tony's cars cars cars side by side plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tony's cars cars cars side by side plots-2.png){width=672}\n:::\n:::\n\n\n\n8.  Using code chunk options, make it so this chunk shows the code but not the output:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n:::\n\n\n\n9.  Using code chunk options, make it so the file can still knit even though this chunk has an error\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + a\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'a' not found\n```\n\n\n:::\n:::\n\n\n\n10. Using code chunk options, create a descriptive `label` for each of the code chunks above.\n\n## Data Wrangling Review\n\nSince you already seen some `ggplot`s, let's do a bit of review on data handling. In this class, we will exclusively make use of tools from the `tidyverse` suite of packages to perform our data cleaning and wrangling operations. If you are less familiar with these packages or it's been some time since you used them, I would strongly recommend referencing the function documentation!\n\nFor these problems, we will continue to work with the `mpg` data frame, making various changes to the data to clean it up.\n\n11. The `fl` variable describes the type of fuel for each car, with levels: `p`, `r`, `e`, `d`, and `c`. Do some research into what each of these labels mean! Then, use the `if_else()` function to create a new variable (`fuel_type`) with two levels: `petrol` (any car using petrolium-based gas) and `alternative energy` (any car not using petrolium-based gas).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# premium and diesel and regular in petrol, electric and cng in alternative\ndfq11 <-mpg %>%\n  mutate(fuel_type = if_else(fl %in% c(\"p\", \"d\", \"r\"), \"petrol\", \"alternative energy\"))\ndfq11\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n# ℹ 1 more variable: fuel_type <chr>\n```\n\n\n:::\n:::\n\n\n\n12. The `drv` variable describes if the car has front drive (`f`), rear drive (`r`), or four wheel drive (`4`). Let's make better labels for these values! Specifically, use the `case_when()` function to change the `drv` varible to have the following levels: `front`, `rear`, `four wheel`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfq12 <- mpg %>%\n  mutate(drv = case_when(\n    drv == \"f\" ~ \"front\",\n    drv == \"r\" ~ \"rear\",\n    drv == \"4\" ~ \"four wheel\"\n  ))\n\ndfq12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… front    18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… front    21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… front    20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… front    21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… front    16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… front    18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… front    18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… four…    18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… four…    16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… four…    20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n\n(string split + remove extra \")\" ) 13. The `trans` variable contains two pieces of information, (1) the transmission style (`auto` or `manual`) and the specific type of transmission (e.g., `l5`, `m5`). Using the `str_split()` function, create a new variable (`trans_type`) containing the specific type of transmission of each car. Once you've made this new variable, use the `rename()` function to change the name of the `trans` column to `trans_style`.\\\n*Hint: You will need to deal with the stray parenthesis!*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfq13 <- mpg %>%\n  mutate(trans_type = str_split(trans, \"\\\\(\", simplify = T)[,2],\n         trans_type = str_remove(trans_type, \"\\\\)\"),\n         trans = str_split(trans, \"\\\\(\", simplify = T)[,1]) %>%\n  rename(trans_style = trans)\n\ndfq13\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans_style drv     cty   hwy fl   \n   <chr>        <chr>      <dbl> <int> <int> <chr>       <chr> <int> <int> <chr>\n 1 audi         a4           1.8  1999     4 auto        f        18    29 p    \n 2 audi         a4           1.8  1999     4 manual      f        21    29 p    \n 3 audi         a4           2    2008     4 manual      f        20    31 p    \n 4 audi         a4           2    2008     4 auto        f        21    30 p    \n 5 audi         a4           2.8  1999     6 auto        f        16    26 p    \n 6 audi         a4           2.8  1999     6 manual      f        18    26 p    \n 7 audi         a4           3.1  2008     6 auto        f        18    27 p    \n 8 audi         a4 quattro   1.8  1999     4 manual      4        18    26 p    \n 9 audi         a4 quattro   1.8  1999     4 auto        4        16    25 p    \n10 audi         a4 quattro   2    2008     4 manual      4        20    28 p    \n# ℹ 224 more rows\n# ℹ 2 more variables: class <chr>, trans_type <chr>\n```\n\n\n:::\n:::\n\n\n\n## Getting to know your classmates\n\n14. Find someone who took Stat 331 from a different professor than you. Compare your experiences. Tell me their name and professor. List one or two things that you think you learned more about, and one or two things that they learned more about.\n\nLily had Dr. Frame and learned a lot about tidyverse and said she had a lot of fill in the blank questions on Canvas. She said she learned how to use R for applications outside of statistics. In my R class, I had Dr. T, and I learned a lot of beginner and intermediate R skills, including making functions and project work.\n\nI think I learned more about R in relation to data wrangling and statistics, and Lily learned more about applying R to situations outside of statistics like economics.\n\n15. Find someone in the class who **does not** share your birth month. Tell me their name and birthday, and use R to find out how many days apart your birthdays are.\n\nHannah, December 3rd 2003\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_bday <- as.Date(\"2001-08-30\")\nhannah_bday  <- as.Date(\"2003-12-03\")\ndiff <- hannah_bday - my_bday\ndiff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 825 days\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}