{
  "hash": "b69723d0f8593320ee55f2c47bc315c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 6 Blog Post\"\ndescription: \"Functions and Code Efficiency\"\nauthor:\n  - name: ComedicToast\n    url: https://github.com/ComedicToast.io\ndate: 5-11-2025\ncategories: [Quarto, R] # self-defined categories\nimage: thumbnail.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\n\nThe exercises from the functions below were pulled from the newest version of\n[*R for Data Science*](https://r4ds.hadley.nz/). Specifically, from Chapters 25 \nand 26. For this \"alternative\" lab you will complete the exercises from the \ntextbook, with the option of submitting a pull request to the \n[repository for the textbook solutions](https://github.com/mine-cetinkaya-rundel/r4ds-solutions/).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n# Vector Functions\n\n**Question 1:** The `rescale01()` function below performs a min-max scaling to \nstandardize a numeric vector, but infinite values are left unchanged. Rewrite\n`rescale01()` so that `-Inf` is mapped to 0, and `Inf` is mapped to 1?\n*Hint: This seems like a great place for `case_when()`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale01 <- function(x) {\n  if (!is.vector(x)) {\n    stop(\"The input for `x` must be a vector.\")\n  }\n\n  \n  x <- case_when(\n    x == Inf ~ 1,\n    x == -Inf ~ 0,\n    TRUE ~ x\n  )\n  rng <- range(x, na.rm = TRUE, finite = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}\n\nrescale01(c(1, 2, 3, 4, 5, Inf, -Inf))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2 0.4 0.6 0.8 1.0 0.2 0.0\n```\n\n\n:::\n:::\n\n\n\n\n**Question 2:** Write a function that accepts a vector of birthdates and \ncomputes the age of each person in years.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_calc <- function(birthdates) {\n  if (!is.vector(birthdates)) {\n    stop(\"The input for `birthdates` must be a vector.\")\n  }\n  \n  birthdates <- as.Date(birthdates)\n  today <- Sys.Date()\n  ages <- as.integer((today - birthdates) / 365.25) \n  return(ages)\n}\n\nage_calc(c(\"2001-08-30\", \"2003-08-08\", \"2005-08-31\", \"1100-03-07\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  23  21  19 925\n```\n\n\n:::\n:::\n\n\n\n**Question 3:** Write a function that computes the variance and skewness of a\nnumeric vector. Feel free to look up the definitions on Wikipedia or elsewhere!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_skew <- function(x){\n  if (!is.vector(x)) {\n    stop(\"The input for `x` must be a vector.\")\n  }\n  \n  variance <- var(x)\n  \n  n <- length(x)\n  mean <- mean(x)\n  sd <- sd(x)\n  \n  skewness <- (sum((x - mean)^3)/(n * sd^3))\n  return(list(variance = variance, skewness = skewness))\n}\n\nvar_skew(c(1,2,3,4,11037))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$variance\n[1] 24352039\n\n$skewness\n[1] 1.073312\n```\n\n\n:::\n:::\n\n\n\n**Question 4:** Write a function called `both_na()` which takes two vectors of\nthe same length and returns the number of positions that have an `NA` in both\nvectors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboth_na <- function(V1, V2){\n  if (!is.vector(V1) | !is.vector(V2)) {\n    stop(\"The input for `V1` and 'V2' must be a vector.\")\n  }\n  \n  if (length(V1) != length(V2)) {\n    stop(\"make those vectors the same length or ELSE\")\n  }\n  \n  total_both_na_positions <- sum(is.na(V1) & is.na(V2))\n  return(total_both_na_positions)\n  \n}\n\nboth_na(c(NA, NA, 11037), c(NA, 1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n## Data Frame Functions\n\n**Question 5:** Insert the data frame function you wrote from Lab 6 (either\nExercise 1 or Exercise 2). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove_outliers <- function(df, ..., sd_thresh = 3){\n  \n  #error cases for df and sd_thresh\n  if (!is.data.frame(df)) {\n    stop(\"df must be a data frame please!!!!!!!\")\n  }\n  if (!is.numeric(sd_thresh) | sd_thresh <= 0) {\n    stop(\"sd_thresh has to be a positive number please!!!!!!\")\n  }\n  \n  #turn everything in ellipses to quosures\n  names_quosures <- enquos(...)\n  #take everything in names_quosures and extracts the names as character strings\n  names <- map_chr(names_quosures, quo_name)\n  \n  #error cases for the names/...\n  if (length(names) < 1) {\n    stop(\"provide column names to remove outliers from please bro\")\n  }\n  if (!is.character(names)) {\n    stop(\"column names must be character strings!! \")\n  }\n  if (!all(names %in% names(df))) {\n    stop(\"the column(s) are not in the data frame :(\")\n  }\n  \n  #meat of the function. check if the col is numeric, calc z score and then . way to do this without for looping?\n  df_RO <- df\n  for (name in names) {\n    if (!is.numeric(df_RO[[name]])) {\n      warning(paste(\"Skipping non-numeric column \", name))\n      next\n    }\n    mean <- mean(df_RO[[name]], na.rm = TRUE)\n    sd <- sd(df_RO[[name]], na.rm = TRUE)\n    abs_z <- abs((df_RO[[name]] - mean) / sd)\n    df_RO <- df_RO[abs_z <= sd_thresh | is.na(abs_z), ]\n  }\n  return(df_RO)\n}\n\n## Testing how your function handles multiple input variables\nremove_outliers(diamonds, \n                price, \n                x, \n                y, \n                z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 52,673 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 52,663 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n## Testing how your function handles an input that isn't numeric\nremove_outliers(diamonds, \n                price, \n                color)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in remove_outliers(diamonds, price, color): Skipping non-numeric column\ncolor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 52,734 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 52,724 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n## Testing how your function handles a non-default sd_thresh\nremove_outliers(diamonds, \n                price,\n                x, \n                y, \n                z, \n                sd_thresh = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48,955 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 48,945 more rows\n```\n\n\n:::\n:::\n\n\n\nFor Questions 6 - 10 you will write different functions which work with data \nsimilar to the `nycflights13` data. \n\n\n\n\n\n\n\n\n**Question 6:** Write a `filter_severe()` function that finds all flights that\nwere cancelled (i.e. `is.na(arr_time)`) or delayed by more than an hour.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assuming arrival or departure delay\nfilter_severe <- function(df, arrival_delay_var, departure_delay_var, arrival_time_var){\n\n#checks to make sure all the supplied columns are numeric\n    non_num <- df %>%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %>%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n  \n  \n  filtered_df <- df %>%\n    filter(is.na({{arrival_time_var}}) | {{arrival_delay_var}} > 60 | {{departure_delay_var}} > 60)\n  \n  return(filtered_df)\n}\n\nfilter_severe(flights, arr_delay, dep_delay, arr_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40,262 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      811            630       101     1047            830\n 2  2013     1     1      826            715        71     1136           1045\n 3  2013     1     1      848           1835       853     1001           1950\n 4  2013     1     1      957            733       144     1056            853\n 5  2013     1     1     1114            900       134     1447           1222\n 6  2013     1     1     1120            944        96     1331           1213\n 7  2013     1     1     1255           1200        55     1451           1330\n 8  2013     1     1     1301           1150        71     1518           1345\n 9  2013     1     1     1337           1220        77     1649           1531\n10  2013     1     1     1342           1320        22     1617           1504\n# ℹ 40,252 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n**Question 7:** Write a `summarize_severe()` function that counts the number of \ncancelled flights and the number of flights delayed by more than an hour.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_severe <- function(df, arrival_delay_var, departure_delay_var, arrival_time_var){\n  \n  \n#checks to make sure all the supplied columns are numeric\n    non_num <- df %>%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %>%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n  \n  \n  cancelled_count <- df %>%\n    filter(is.na({{arrival_time_var}})) %>%\n    count()\n  \n  delayed_count <- df %>%\n    filter({{arrival_delay_var}} > 60 | {{departure_delay_var}} > 60) %>%\n    count()\n  \n  output <- paste0(\"There are \", cancelled_count, \" cancelled flights and there are \", delayed_count, \" delayed flights, counting both arrival and departure delays.\")\n  return(output)\n  \n}\n\nsummarize_severe(flights, arr_delay, dep_delay, arr_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"There are 8713 cancelled flights and there are 31705 delayed flights, counting both arrival and departure delays.\"\n```\n\n\n:::\n:::\n\n\n\n**Question 8:** Modify your `filter_severe()` function to allow the user to \nsupply the number of hours that should be used to filter the flights that were\ncancelled or delayed. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assuming arrival or departure delay\nfilter_severe <- function(df, arrival_delay_var, departure_delay_var, arrival_time_var, hours = 1){\n\n#checks to make sure all the supplied columns are numeric\n    non_num <- df %>%\n    select( {{ arrival_delay_var }}, {{departure_delay_var}}, {{arrival_time_var}}) %>%\n    sapply(is.numeric)\n\n  if (!all(non_num)) {\n    stop(\n      str_c(\"One of the columns you entered is not numeric.\")\n      )\n  }\n    \n  if (!is.numeric({{hours}})) {\n    stop(\n      str_c(\"You must use a number for the `hours` input!\")\n      )\n  }\n  \n  \n  filtered_df <- df %>%\n    filter(is.na({{arrival_time_var}}) | {{arrival_delay_var}} > hours*60 | {{departure_delay_var}} > hours*60)\n  \n  return(filtered_df)\n}\n\nfilter_severe(flights, arr_delay, dep_delay, arr_time, hours=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13,161 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1     1815           1325       290     2120           1542\n 3  2013     1     1     1842           1422       260     1958           1535\n 4  2013     1     1     2006           1630       216     2230           1848\n 5  2013     1     1     2016           1930        46       NA           2220\n 6  2013     1     1     2115           1700       255     2330           1920\n 7  2013     1     1     2205           1720       285       46           2040\n 8  2013     1     1     2312           2000       192       21           2110\n 9  2013     1     1     2343           1724       379      314           1938\n10  2013     1     1       NA           1630        NA       NA           1815\n# ℹ 13,151 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n**Question 9:** Write a `summarize_weather()` function that summarizes the\nweather to compute the minimum, mean, and maximum, of a user supplied variable. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_weather <- function(df, variable){\n  \n  non_num <- df %>%\n    pull( {{ variable }}) %>%\n    is.numeric()\n  \n   if (!non_num) {\n    stop(\n      str_c(\"You must use a numeric variable for the `variable` input!\")\n      )\n  }\n  \n  df %>%\n    summarize(\n      min = min({{variable}}, na.rm = TRUE),\n      mean = mean({{variable}}, na.rm = TRUE),\n      max = max({{variable}}, na.rm=TRUE)\n    )\n    \n}\n\nsummarize_weather(weather, temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n    min  mean   max\n  <dbl> <dbl> <dbl>\n1  10.9  55.3  100.\n```\n\n\n:::\n:::\n\n\n\n\n\n**Question 10:** Write a `standardize_time()` function that converts the user\nsupplied variable that uses clock time (e.g., `dep_time`, `arr_time`, etc.) into\na decimal time (i.e. hours + (minutes / 60)).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandardize_time <- function(df, clock_time){\n  non_num <- df %>%\n    pull({{ clock_time }}) %>%\n    is.numeric()\n  \n   if (!non_num) {\n    stop(\n      str_c(\"You must use a numeric variable for the `clock_time` input!\")\n      )\n  }\n  \n  df %>%\n    mutate(\n      {{clock_time}} := case_when(\n        !is.na({{clock_time}}) ~ floor({{clock_time}}/100) + ({{clock_time}} %% 100) / 60\n      )\n    )\n  \n  \n}\n\nstandardize_time(flights, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <dbl>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1     5.28            515         2      830            819\n 2  2013     1     1     5.55            529         4      850            830\n 3  2013     1     1     5.7             540         2      923            850\n 4  2013     1     1     5.73            545        -1     1004           1022\n 5  2013     1     1     5.9             600        -6      812            837\n 6  2013     1     1     5.9             558        -4      740            728\n 7  2013     1     1     5.92            600        -5      913            854\n 8  2013     1     1     5.95            600        -3      709            723\n 9  2013     1     1     5.95            600        -3      838            846\n10  2013     1     1     5.97            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n# Plotting Functions\n\nYou might want to read over the [Plot Functions section of *R for Data Science*](https://r4ds.hadley.nz/functions.html#plot-functions)\n\n**Question 11:** Build a `sorted_bars()` function which:\n\n- takes a data frame and a variable as inputs and returns a **vertical** bar\nchart \n- sorts the bars in decreasing order (largest to smallest)\n- adds a title that includes the context of the variable being plotted\n\n*Hint 1: The `fct_infreq()` and `fct_rev()` functions from the forcats package will be helpful for sorting the bars!*\n*Hint 2: The `englue()` function from the rlang package will be helpful for adding a variable's name into the plot title!*\n\nI also made it so that if a variable had more than 10 unique values, the bar chart would be horizontal since the names of each category tend to blend together when the bar chart is vertical.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsorted_bars <- function(df, var){\n  #check if var is correct data type\n  non_char_ord <- df %>%\n    pull({{ var }}) %>%\n    (\\(x)is.character(x) | is.ordered(x) | is.factor(x))\n  \n   if (!non_char_ord) {\n    stop(\n      str_c(\"You must use a character or factor for the `var` input!\")\n      )\n  }\n  #use enquo to pull name of var\n  var_name <- rlang::as_name(enquo(var))\n  \n  #count unique # of columns to determine if coord flipping later\n  total_vals <- n_distinct(df %>% pull({{ var }}))\n  \n  p <- df %>%\n    ggplot(aes(x = fct_infreq(as.factor({{var}})))) +\n    geom_bar() +\n    labs(\n      title = rlang::englue(\"Distribution of { var_name }\"),\n      x = var_name,\n      y = \"Count\"\n    ) +\n    theme_minimal() +\n    theme(\n      panel.grid.major.x = element_blank()\n    )\n  \n  if (total_vals > 10) {\n    p <- p + coord_flip()\n  }\n  \n  return(p)\n}\n\nsorted_bars(diamonds, clarity)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-11-1.png){width=672}\n:::\n:::\n\n\n\n# Iteration\n\nAlright, now let's take our plotting function and iterate it! \n\n**Question 12:** Make a sorted barplot for every character variable in the `mpg`\ndataset (built into `ggplot2`). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar_vars <- mpg %>%\n  select(where(is.character)) %>%\n  names()\n\nmap(char_vars, ~sorted_bars(mpg, !!sym(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[3]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[4]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[5]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[6]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/question-12-6.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}